#!/usr/bin/env python3
import sys, yaml, os

if len(sys.argv) < 2 or sys.argv[1] not in ("zsh", "powershell"):
    print("Usage: gen_dotfiles.py [zsh|powershell] [output_file_name]", file=sys.stderr)
    sys.exit(1)

shell = sys.argv[1]
filename = sys.argv[2] if len(sys.argv) > 2 else ("unified.ps1" if shell == "powershell" else "unified.zsh")

base = os.path.dirname(os.path.abspath(__file__))
definitions_dir = os.path.join(base, "definitions")
out_dir = os.path.join(base, "out", "pwsh7" if shell == "powershell" else "linux")
os.makedirs(out_dir, exist_ok=True)
output_path = os.path.join(out_dir, filename)

with open(os.path.join(definitions_dir, "aliases.yml"), encoding="utf-8") as f:
    aliases = yaml.safe_load(f).get("aliases", [])

with open(os.path.join(definitions_dir, "functions.yml"), encoding="utf-8") as f:
    functions = yaml.safe_load(f).get("functions", [])

user_functions = {f["name"] for f in functions}

safe_aliases = []
deferred_aliases = []

for a in aliases:
    cmd = a["cmd"]
    shell_cmd = cmd if isinstance(cmd, str) else cmd.get(shell)
    if not shell_cmd:
        continue
    cmd_base = str(shell_cmd).split()[0]
    if cmd_base in user_functions:
        deferred_aliases.append((a, shell_cmd))
    else:
        safe_aliases.append((a, shell_cmd))

with open(output_path, "w", encoding="utf-8") as out:
    def write(line=""):
        out.write(line + "\n")

    if shell == "zsh":
        write("# autogenerated — source via your .zshrc")
    elif shell == "powershell":
        write("# autogenerated — dot-source via your PowerShell $PROFILE")
    write()

    # functions first
    for f in functions:
        name = f["name"]
        helpstr = f.get("help", "")
        body = f.get("body")
        write(f"# {helpstr}")
        if isinstance(body, dict):
            shell_body = body.get(shell)
            if shell_body:
                write(shell_body)
        elif isinstance(body, str):
            if shell == "zsh":
                write(f"function {name}() {{")
                write(f"  {body}")
                write("}")
            elif shell == "powershell":
                write(f"function {name} {{")
                write("  param([Parameter(ValueFromRemainingArguments=$true)] $args)")
                write(f"  {body}")
                write("}")
        write()

    # safe aliases
    for a, shell_cmd in safe_aliases:
        helpstr = a.get("help", "")
        if shell == "zsh":
            write(f"alias {a['name']}='{shell_cmd}'  # {helpstr}")
        elif shell == "powershell":
            write(f"# {helpstr}")
            write(f"Set-Alias -Name {a['name']} -Value {shell_cmd}")
    write()

    # deferred aliases
    for a, shell_cmd in deferred_aliases:
        helpstr = a.get("help", "")
        if shell == "zsh":
            write(f"alias {a['name']}='{shell_cmd}'  # {helpstr}")
        elif shell == "powershell":
            write(f"# {helpstr}")
            write(f"Set-Alias -Name {a['name']} -Value {shell_cmd}")
