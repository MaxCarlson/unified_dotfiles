# dotcmd dispatcher
function dotcmd {
  param(
    [string]$name,
    [Parameter(ValueFromRemainingArguments = $true)]
    $args
  )

  $dotcmdScript = "$env:DOTFILES\dotcmd_runner.py"  # Adjust if needed
  if (-not (Test-Path $dotcmdScript)) {
    Write-Error "dotcmd not found at $dotcmdScript"
    return
  }

  $cmd = @($name) + $args
  & python $dotcmdScript @cmd
}


# autogenerated â€” unified pwsh config

# Show all aliases (using: alias | rg).
dotcmd ag $args

# Search alias descriptions by keyword.
dotcmd ahelp $args

# Search function descriptions by keyword.
dotcmd fhelp $args

# Search both function and alias descriptions by keyword.
dotcmd helpall $args

# Search functions by name or description, highlighting matches.
dotcmd fg $args

# Lists all registered functions and their descriptions.
dotcmd functionsl

# Runs a command or alias repeatedly until it succeeds.
dotcmd retrycmd $args

# Creates a directory if it doesn't exist and returns its full path.
dotcmd mkcd $args

# Creates a file if it doesn't exist.
dotcmd create_if_missing $args

# Prints the Obsidian directory path from the OBSIDIAN env var.
dotcmd cdobs

# Gets the size of a file in bytes.
dotcmd get_file_size $args

# Search a program's help output for a pattern (tries --help, -h, -?, /?).
dotcmd hrg $args

# Creates a directory and opens a file using Neovim.
dotcmd mkvi $args

# Lists files in tree format up to the specified depth.
dotcmd lt $args

# Runs lt with a specified depth and writes output to a file.
dotcmd ltf $args

# Finds files by name, sorted by modification time, then runs eza -lt.
dotcmd fdtl $args

# Finds files by name, sorted by modification time.
dotcmd fdta $args

# Runs ripgrep with default options.
dotcmd rg $args

# Finds files containing a match, sorted by modification time.
dotcmd rgta $args

# Prints matching lines in files, sorted by modification time.
dotcmd rgtf $args

# Finds files by content match, sorted by modification time.
dotcmd rgfn $args

# Finds files matching by content OR filename, sorted by modification time.
dotcmd rgtc $args

# Finds files matching by content OR filename, sorted by creation time.
dotcmd rgtm $args

# Returns top N files with the most matches for a phrase.
dotcmd rgmax $args

# Alias for rgmax with default num_files=100.
dotcmd rgmaxn $args

# Copy files via rsync under the hood with in-place progress.
dotcmd rp $args

# Verbose copy (rsync under the hood, very verbose).
dotcmd rpv $args

# Dry-run copy (rsync under the hood).
dotcmd rpd $args

# Copy ignoring existing files (rsync under the hood).
dotcmd rpi $args

# Copy then delete source files (rsync under the hood).
dotcmd rpdel $args

# Wraps eza; supports '--no=ptfu' and '--getsizes'
dotcmd ezaw $args

# Search for regular files.
dotcmd fdn $args

# Search for directories.
dotcmd fdd $args

# Include hidden files (ignoring .gitignore).
dotcmd fdx $args

# Search for executables.
dotcmd fde $args

# Search for Python files.
dotcmd fdpy $args

# Search for Markdown files.
dotcmd fdmd $args

# Search for JSON files.
dotcmd fdjson $args

# Search for log files.
dotcmd fdlog $args

# Search with regex.
dotcmd fdr $args

# Exclude .git directories.
dotcmd fdgit $args

# Files changed within a specific time frame.
dotcmd fdc $args

# Display results in a tree format.
dotcmd fdtree $args

# List all files.
dotcmd rgn $args

# Search hidden files.
dotcmd rgh $args

# Ignore .gitignore rules.
dotcmd rgx $args

# Search with line numbers.
dotcmd rgl $args

# Show match counts.
dotcmd rgc $args

# Match whole words only.
dotcmd rgw $args

# Smart case search.
dotcmd rgs $args

# Invert match (exclude matches).
dotcmd rgv $args

# Search JSON files.
dotcmd rgjson $args

# Search Python files.
dotcmd rgpy $args

# Search log files.
dotcmd rglog $args

# Search Markdown files.
dotcmd rgmd $args

# Show 3 lines of context.
dotcmd rgp $args

# Show 5 lines of context.
dotcmd rgp5 $args

# Search C# files.
dotcmd rgcsharp $args

# Regex-based search.
dotcmd rge $args

# Search functions by name/definition.
dotcmd agf $args

# Search function help strings.
dotcmd agfh $args

# List all functions using compgen and ripgrep.
Set-Alias -Name fnrg -Value compgen -A function | rg

# Search command history using ripgrep.
Set-Alias -Name hg -Value history | rg

# Search large history using lhistory and ripgrep.
Set-Alias -Name lhg -Value lhistory | rg

# Move files to trash instead of deleting them.
Set-Alias -Name rm -Value trash

# bat command (as installed).
Set-Alias -Name bat -Value bat

# List files (eza): no permissions, git info, icons, no user info.
Set-Alias -Name l -Value ezaw --no-permissions --git --icons --no-user

# List files in long format (eza): with permissions, git info, icons, modified time, smart grouping.
Set-Alias -Name ls -Value ezaw -lah --no-permissions --git --icons --modified --group-directories-first --smart-group --no-user

# List all files (eza): show hidden files with classify and grid view.
Set-Alias -Name la -Value ezaw -a --no-permissions --git --icons --classify --grid --group-directories-first

# Long listing (eza): display created time, group directories first, smart grouping.
Set-Alias -Name ll -Value ezaw -lah --no-permissions --git --icons --modified --group-directories-first --smart-group

# Long listing (eza): display created time, group directories first, smart grouping, total-size.
Set-Alias -Name lls -Value ezaw -lah --no-permissions --git --icons --modified --group-directories-first --smart-group --total-size

# Long listing (eza): total size, created/modified times with icons and git info.
Set-Alias -Name lll -Value ezaw -lah --git --icons --modified --accessed --group-directories-first --smart-group --total-size

# Long listing (eza): total size, created/modified times with icons and git info.
Set-Alias -Name llll -Value ezaw -lah --all --header --group-directories-first --smart-group --icons --git --time-style=iso --modified --accessed --changed --inode --links --sort=name --reverse --hyperlink --absolute=on --blocksize --numeric

# List files (eza): without user, time, or filesize info.
Set-Alias -Name lo -Value ezaw -lah --no-permissions --git --icons --no-user --no-time --no-filesize

# List files (eza): with created & modified times and git repository info.
Set-Alias -Name lg -Value ezaw -lah --no-permissions --git --icons --created --modified --group-directories-first --smart-group --git-repos

# Advanced listing (eza): smart grouping with changed, accessed, and created times.
Set-Alias -Name laha -Value ezaw -lahSOnMIHZo@ --git --git-repos --icons --smart-group --changed --accessed --created

# Sort files by size using eza.
Set-Alias -Name lss -Value ezaw --sort=size

# Sort files by modification time using eza.
Set-Alias -Name lst -Value ezaw --sort=time

# Sort files by file extension using eza.
Set-Alias -Name lse -Value ezaw --sort=extension

# List files (eza): grid, classify, auto-color, sorted by type, with grouped directories.
Set-Alias -Name lx -Value ezaw --icons --grid --classify --colour=auto --sort=type --group-directories-first --header --modified --created --git --binary --group

# Tree view (eza): list directory tree at level 1.
Set-Alias -Name l1 -Value ezaw --icons --classify --tree --level=1 --git

# Tree view (eza): list directory tree at level 2.
Set-Alias -Name l2 -Value ezaw --icons --classify --tree --level=2 --git

# Tree view (eza): list directory tree at level 3.
Set-Alias -Name l3 -Value ezaw --icons --classify --tree --level=3 --git

# Tree view (eza): list directory tree at level 4.
Set-Alias -Name l4 -Value ezaw --icons --classify --tree --level=4 --git

# Tree view (eza): list directory tree at level 5.
Set-Alias -Name l5 -Value ezaw --icons --classify --tree --level=5 --git

# Long tree view (eza): directory tree at level 1.
Set-Alias -Name lt1 -Value ezaw --icons --classify --long --tree --level=1 --git

# Long tree view (eza): directory tree at level 2.
Set-Alias -Name lt2 -Value ezaw --icons --classify --long --tree --level=2 --git

# Long tree view (eza): directory tree at level 3.
Set-Alias -Name lt3 -Value ezaw --icons --classify --long --tree --level=3 --git

# Long tree view (eza): directory tree at level 4.
Set-Alias -Name lt4 -Value ezaw --icons --classify --long --tree --level=4 --git

# Long tree view (eza): directory tree at level 5.
Set-Alias -Name lt5 -Value ezaw --icons --classify --long --tree --level=5 --git

# Git push new branch: set upstream to origin on current branch.
Set-Alias -Name gpnew -Value git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)

# Fuzzy file finder with bat preview.
Set-Alias -Name fzfp -Value fzf --preview "bat --style=numbers --color=always {}"

# Fuzzy git branch switch using fzf.
Set-Alias -Name fzgb -Value git checkout $(git branch | fzf)

# Add a new git remote called origin.
Set-Alias -Name grao -Value git remote add origin

# SSH into slice and run arbitrary commands.
Set-Alias -Name sshs -Value sshsx

# SSH into slice via pwsh7 and run arbitrary commands.
Set-Alias -Name sshsx -Value sshsx

# SSH into slice and run cdpon.
Set-Alias -Name sshsp -Value sshsx cdpo

# SSH into slice and run cdpon.
Set-Alias -Name sshspn -Value sshsx cdpon

# Go back to previous directory
Set-Alias -Name - -Value Pop-Location

# Go back one directory in stack
Set-Alias -Name 1 -Value Pop-Location; Pop-Location

# Go back two directories in stack
Set-Alias -Name 2 -Value Pop-Location; Pop-Location; Pop-Location

# Go back three directories in stack
Set-Alias -Name 3 -Value Pop-Location; Pop-Location; Pop-Location; Pop-Location

# Go back four directories in stack
Set-Alias -Name 4 -Value Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location

# Go back five directories in stack
Set-Alias -Name 5 -Value Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location

# Go back six directories in stack
Set-Alias -Name 6 -Value Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location

# Go back seven directories in stack
Set-Alias -Name 7 -Value Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location

# Go back eight directories in stack
Set-Alias -Name 8 -Value Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location

# Go back nine directories in stack
Set-Alias -Name 9 -Value Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location; Pop-Location

# Change to AIâ€‘assistant project
Set-Alias -Name cdai -Value Set-Location $env:AIASSISTANT

# Change to Books directory
Set-Alias -Name cdb -Value Set-Location $env:BOOKS

# Change to dotfiles directory
Set-Alias -Name cdd -Value Set-Location $env:DOTFILES

# Change to downloads directory
Set-Alias -Name cddl -Value Set-Location $env:DOWNLOADS

# Change to projects directory
Set-Alias -Name cdpj -Value Set-Location $env:PROJECTS

# Change to scripts directory
Set-Alias -Name cds -Value Set-Location $env:SCRIPTS

# Change to Obsidian vault
Set-Alias -Name cdobs -Value Set-Location $HOME\Documents\Obsidian-Vault

# Change to Repos root
Set-Alias -Name cdsrc -Value Set-Location $HOME\Repos

# Change to Pictures\Saved
Set-Alias -Name cdpo -Value Set-Location D:\Pictures\Saved

# Change to tmpvids inside Pictures\Saved
Set-Alias -Name cdpon -Value Set-Location D:\Pictures\Saved\tmpvids

# Change to C:\Torrents
Set-Alias -Name cdtor -Value Set-Location C:\Torrents

# Change to D:\Torrents
Set-Alias -Name cdtord -Value Set-Location D:\Torrents

# Fuzzy git branch switch using fzf
Set-Alias -Name fzgb -Value git checkout $(git branch | fzf)

# Shorthand for git
Set-Alias -Name g -Value git

# git add
Set-Alias -Name ga -Value git add

# git add --all
Set-Alias -Name gaa -Value git add --all

# git am
Set-Alias -Name gam -Value git am

# git am --abort
Set-Alias -Name gama -Value git am --abort

# git am --continue
Set-Alias -Name gamc -Value git am --continue

# git am --skip
Set-Alias -Name gams -Value git am --skip

# git am --show-current-patch
Set-Alias -Name gamscp -Value git am --show-current-patch

# git apply
Set-Alias -Name gap -Value git apply

# git add --patch
Set-Alias -Name gapa -Value git add --patch

# git apply --3way
Set-Alias -Name gapt -Value git apply --3way

# git add --update
Set-Alias -Name gau -Value git add --update

# git add --verbose
Set-Alias -Name gav -Value git add --verbose

# git branch
Set-Alias -Name gb -Value git branch

# git branch --delete --force
Set-Alias -Name gbD -Value git branch --delete --force

# git branch --all
Set-Alias -Name gba -Value git branch --all

# git branch --delete
Set-Alias -Name gbd -Value git branch --delete

# List gone branches
Set-Alias -Name gbg -Value LANG=C git branch -vv | grep ": gone\]"

# Delete gone branches (force)
Set-Alias -Name gbgD -Value LANG=C git branch --no-color -vv \ | grep ": gone\\]" \ | cut -c 3- \ | awk '{print $1}' \ | xargs git branch -D

# Delete gone branches
Set-Alias -Name gbgd -Value LANG=C git branch --no-color -vv \ | grep ": gone\\]" \ | cut -c 3- \ | awk '{print $1}' \ | xargs git branch -d

# git blame -w
Set-Alias -Name gbl -Value git blame -w

# git branch --move
Set-Alias -Name gbm -Value git branch --move

# git branch --no-merged
Set-Alias -Name gbnm -Value git branch --no-merged

# git branch --remote
Set-Alias -Name gbr -Value git branch --remote

# git bisect
Set-Alias -Name gbs -Value git bisect

# git bisect bad
Set-Alias -Name gbsb -Value git bisect bad

# git bisect good
Set-Alias -Name gbsg -Value git bisect good

# git bisect new
Set-Alias -Name gbsn -Value git bisect new

# git bisect old
Set-Alias -Name gbso -Value git bisect old

# git bisect reset
Set-Alias -Name gbsr -Value git bisect reset

# git bisect start
Set-Alias -Name gbss -Value git bisect start

# git commit --verbose
Set-Alias -Name gc -Value git commit --verbose

# git commit --verbose --amend
Set-Alias -Name gc! -Value git commit --verbose --amend

# git checkout -B
Set-Alias -Name gcB -Value git checkout -B

# git commit --verbose --all
Set-Alias -Name gca -Value git commit --verbose --all

# git commit --verbose --all --amend
Set-Alias -Name gca! -Value git commit --verbose --all --amend

# git commit --all --message
Set-Alias -Name gcam -Value git commit --all --message

# git commit --verbose --all --no-edit --amend
Set-Alias -Name gcan! -Value git commit --verbose --all --no-edit --amend

# git commit --verbose --all --date=now --no-edit --amend
Set-Alias -Name gcann! -Value git commit --verbose --all --date=now --no-edit --amend

# git commit --verbose --all --signoff --no-edit --amend
Set-Alias -Name gcans! -Value git commit --verbose --all --signoff --no-edit --amend

# git commit --all --signoff
Set-Alias -Name gcas -Value git commit --all --signoff

# git commit --all --signoff --message
Set-Alias -Name gcasm -Value git commit --all --signoff --message

# git checkout -b
Set-Alias -Name gcb -Value git checkout -b

# git checkout $(git_develop_branch)
Set-Alias -Name gcd -Value git checkout $(git_develop_branch)

# git config --list
Set-Alias -Name gcf -Value git config --list

# git clone --recurse-submodules
Set-Alias -Name gcl -Value git clone --recurse-submodules

# git clean --interactive -d
Set-Alias -Name gclean -Value git clean --interactive -d

# git clone --recursive --shallow-submodules --filter=blob:none --also-filter-submodules
Set-Alias -Name gclf -Value git clone --recursive --shallow-submodules --filter=blob:none \ --also-filter-submodules

# git checkout $(git_main_branch)
Set-Alias -Name gcm -Value git checkout $(git_main_branch)

# git commit --message
Set-Alias -Name gcmsg -Value git commit --message

# git commit --verbose --no-edit
Set-Alias -Name gcn -Value git commit --verbose --no-edit

# git commit --verbose --no-edit --amend
Set-Alias -Name gcn! -Value git commit --verbose --no-edit --amend

# git checkout
Set-Alias -Name gco -Value git checkout

# git checkout --recurse-submodules
Set-Alias -Name gcor -Value git checkout --recurse-submodules

# git shortlog --summary --numbered
Set-Alias -Name gcount -Value git shortlog --summary --numbered

# git cherry-pick
Set-Alias -Name gcp -Value git cherry-pick

# git cherry-pick --abort
Set-Alias -Name gcpa -Value git cherry-pick --abort

# git cherry-pick --continue
Set-Alias -Name gcpc -Value git cherry-pick --continue

# git commit --gpg-sign
Set-Alias -Name gcs -Value git commit --gpg-sign

# git commit --signoff --message
Set-Alias -Name gcsm -Value git commit --signoff --message

# git commit --gpg-sign --signoff
Set-Alias -Name gcss -Value git commit --gpg-sign --signoff

# git commit --gpg-sign --signoff --message
Set-Alias -Name gcssm -Value git commit --gpg-sign --signoff --message

# git diff
Set-Alias -Name gd -Value git diff

# git diff --cached
Set-Alias -Name gdca -Value git diff --cached

# git describe --tags $(git rev-list --tags --max-count=1)
Set-Alias -Name gdct -Value git describe --tags $(git rev-list --tags --max-count=1)

# git diff --cached --word-diff
Set-Alias -Name gdcw -Value git diff --cached --word-diff

# git fetch && git diff HEAD..@{u}
Set-Alias -Name gdru -Value git fetch && git diff HEAD..@{u}

# git diff --staged
Set-Alias -Name gds -Value git diff --staged

# git fetch && git diff HEAD...@{u}
Set-Alias -Name gdsu -Value git fetch && git diff HEAD...@{u}

# git diff-tree --no-commit-id --name-only -r
Set-Alias -Name gdt -Value git diff-tree --no-commit-id --name-only -r

# git diff @{upstream}
Set-Alias -Name gdup -Value git diff @{upstream}

# git diff --word-diff
Set-Alias -Name gdw -Value git diff --word-diff

# git fetch
Set-Alias -Name gf -Value git fetch

# git fetch --all --tags --prune --jobs=10
Set-Alias -Name gfa -Value git fetch --all --tags --prune --jobs=10

# git ls-files | grep
Set-Alias -Name gfg -Value git ls-files | grep

# git fetch origin
Set-Alias -Name gfo -Value git fetch origin

# git gui citool
Set-Alias -Name gg -Value git gui citool

# git gui citool --amend
Set-Alias -Name gga -Value git gui citool --amend

# git pull origin "$(git_current_branch)"
Set-Alias -Name ggpull -Value git pull origin "$(git_current_branch)"

# git push origin "$(git_current_branch)"
Set-Alias -Name ggpush -Value git push origin "$(git_current_branch)"

# git branch --set-upstream-to=origin/$(git_current_branch)
Set-Alias -Name ggsup -Value git branch --set-upstream-to=origin/$(git_current_branch)

# git help
Set-Alias -Name ghh -Value git help

# git update-index --assume-unchanged
Set-Alias -Name gignore -Value git update-index --assume-unchanged

# git ls-files -v | grep "^[[:lower:]]"
Set-Alias -Name gignored -Value git ls-files -v | grep "^[[:lower:]]"

# git svn dcommit && git push github $(git_main_branch):svntrunk
Set-Alias -Name git-svn-dcommit-push -Value git svn dcommit && git push github $(git_main_branch):svntrunk

# \gitk --all --branches &!
Set-Alias -Name gk -Value \gitk --all --branches &!

# \gitk --all $(git log --walk-reflogs --pretty=%h) &!
Set-Alias -Name gke -Value \gitk --all $(git log --walk-reflogs --pretty=%h) &!

# git pull
Set-Alias -Name gl -Value git pull

# git log --stat
Set-Alias -Name glg -Value git log --stat

# git log --graph
Set-Alias -Name glgg -Value git log --graph

# git log --graph --decorate --all
Set-Alias -Name glgga -Value git log --graph --decorate --all

# git log --graph --max-count=10
Set-Alias -Name glgm -Value git log --graph --max-count=10

# git log --stat --patch
Set-Alias -Name glgp -Value git log --stat --patch

# git log --oneline --decorate
Set-Alias -Name glo -Value git log --oneline --decorate

# pretty git log graph with colors
Set-Alias -Name glod -Value git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"

# pretty git log graph (short date)
Set-Alias -Name glods -Value git log --graph --pretty=\"%Cred%h%Creset -%C(auto)%d%Creset %s \ %Cgreen(%ad) %C(bold blue)<%an>%Creset\" --date=short

# git log --oneline --decorate --graph
Set-Alias -Name glog -Value git log --oneline --decorate --graph

# git log --oneline --decorate --graph --all
Set-Alias -Name gloga -Value git log --oneline --decorate --graph --all

# pretty git log graph (relative time)
Set-Alias -Name glol -Value git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"

# pretty git log graph (relative, all)
Set-Alias -Name glola -Value git log --graph --pretty=\"%Cred%h%Creset -%C(auto)%d%Creset %s \ %Cgreen(%ar) %C(bold blue)<%an>%Creset\" --all

# pretty git log graph with stats
Set-Alias -Name glols -Value git log --graph --pretty=\"%Cred%h%Creset -%C(auto)%d%Creset %s \ %Cgreen(%ar) %C(bold blue)<%an>%Creset\" --stat

# _git_log_prettily
Set-Alias -Name glp -Value _git_log_prettily

# git fetch && git log --oneline --left-right --graph HEAD...@{u}
Set-Alias -Name glru -Value git fetch && git log --oneline --left-right --graph HEAD...@{u}

# git pull upstream $(git_current_branch)
Set-Alias -Name gluc -Value git pull upstream $(git_current_branch)

# git pull upstream $(git_main_branch)
Set-Alias -Name glum -Value git pull upstream $(git_main_branch)

# git merge
Set-Alias -Name gm -Value git merge

# git merge --abort
Set-Alias -Name gma -Value git merge --abort

# git merge --continue
Set-Alias -Name gmc -Value git merge --continue

# git merge --ff-only
Set-Alias -Name gmff -Value git merge --ff-only

# git merge origin/$(git_main_branch)
Set-Alias -Name gmom -Value git merge origin/$(git_main_branch)

# git merge --squash
Set-Alias -Name gms -Value git merge --squash

# git mergetool --no-prompt
Set-Alias -Name gmtl -Value git mergetool --no-prompt

# git mergetool --no-prompt --tool=vimdiff
Set-Alias -Name gmtlvim -Value git mergetool --no-prompt --tool=vimdiff

# git merge upstream/$(git_main_branch)
Set-Alias -Name gmum -Value git merge upstream/$(git_main_branch)

# git push
Set-Alias -Name gp -Value git push

# git push --dry-run
Set-Alias -Name gpd -Value git push --dry-run

# git push --force-with-lease --force-if-includes
Set-Alias -Name gpf -Value git push --force-with-lease --force-if-includes

# git push --force
Set-Alias -Name gpf! -Value git push --force

# git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)
Set-Alias -Name gpnew -Value git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)

# git push origin --all && git push origin --tags
Set-Alias -Name gpoat -Value git push origin --all && git push origin --tags

# git push origin --delete
Set-Alias -Name gpod -Value git push origin --delete

# git pull --rebase
Set-Alias -Name gpr -Value git pull --rebase

# git pull --rebase --autostash
Set-Alias -Name gpra -Value git pull --rebase --autostash

# git pull --rebase --autostash -v
Set-Alias -Name gprav -Value git pull --rebase --autostash -v

# git reset --hard && git clean --force -dfx
Set-Alias -Name gpristine -Value git reset --hard && git clean --force -dfx

# git pull --rebase origin $(git_main_branch)
Set-Alias -Name gprom -Value git pull --rebase origin $(git_main_branch)

# git pull --rebase=interactive origin $(git_main_branch)
Set-Alias -Name gpromi -Value git pull --rebase=interactive origin $(git_main_branch)

# git pull --rebase upstream $(git_main_branch)
Set-Alias -Name gprum -Value git pull --rebase upstream $(git_main_branch)

# git pull --rebase=interactive upstream $(git_main_branch)
Set-Alias -Name gprumi -Value git pull --rebase=interactive upstream $(git_main_branch)

# git pull --rebase -v
Set-Alias -Name gprv -Value git pull --rebase -v

# git push --set-upstream origin $(git_current_branch)
Set-Alias -Name gpsup -Value git push --set-upstream origin $(git_current_branch)

# git push --set-upstream origin $(git_current_branch) --force-with-lease --force-if-includes
Set-Alias -Name gpsupf -Value git push --set-upstream origin $(git_current_branch) --force-with-lease --force-if-includes

# git push upstream
Set-Alias -Name gpu -Value git push upstream

# git push --verbose
Set-Alias -Name gpv -Value git push --verbose

# git remote
Set-Alias -Name gr -Value git remote

# git remote add
Set-Alias -Name gra -Value git remote add

# git remote add origin
Set-Alias -Name grao -Value git remote add origin

# git rebase
Set-Alias -Name grb -Value git rebase

# git rebase --abort
Set-Alias -Name grba -Value git rebase --abort

# git rebase --continue
Set-Alias -Name grbc -Value git rebase --continue

# git rebase $(git_develop_branch)
Set-Alias -Name grbd -Value git rebase $(git_develop_branch)

# git rebase --interactive
Set-Alias -Name grbi -Value git rebase --interactive

# git rebase $(git_main_branch)
Set-Alias -Name grbm -Value git rebase $(git_main_branch)

# git rebase --onto
Set-Alias -Name grbo -Value git rebase --onto

# git rebase origin/$(git_main_branch)
Set-Alias -Name grbom -Value git rebase origin/$(git_main_branch)

# git rebase --skip
Set-Alias -Name grbs -Value git rebase --skip

# git rebase upstream/$(git_main_branch)
Set-Alias -Name grbum -Value git rebase upstream/$(git_main_branch)

# grep --color=auto excluding VCS dirs
Set-Alias -Name grep -Value grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.venv,venv}

# git revert
Set-Alias -Name grev -Value git revert

# git reflog
Set-Alias -Name grf -Value git reflog

# git reset
Set-Alias -Name grh -Value git reset

# git reset --hard
Set-Alias -Name grhh -Value git reset --hard

# git reset --keep
Set-Alias -Name grhk -Value git reset --keep

# git reset --soft
Set-Alias -Name grhs -Value git reset --soft

# git rm
Set-Alias -Name grm -Value git rm

# git rm --cached
Set-Alias -Name grmc -Value git rm --cached

# git remote rename
Set-Alias -Name grmv -Value git remote rename

# git reset origin/$(git_current_branch) --hard
Set-Alias -Name groh -Value git reset origin/$(git_current_branch) --hard

# git remote remove
Set-Alias -Name grrm -Value git remote remove

# git restore
Set-Alias -Name grs -Value git restore

# git remote set-url
Set-Alias -Name grset -Value git remote set-url

# git restore --source
Set-Alias -Name grss -Value git restore --source

# git restore --staged
Set-Alias -Name grst -Value git restore --staged

# cd to repo top (via git rev-parse)
Set-Alias -Name grt -Value cd "$(git rev-parse --show-toplevel || echo .)"

# git reset --
Set-Alias -Name gru -Value git reset --

# git remote update
Set-Alias -Name grup -Value git remote update

# git remote --verbose
Set-Alias -Name grv -Value git remote --verbose

# git status --short --branch
Set-Alias -Name gsb -Value git status --short --branch

# git svn dcommit
Set-Alias -Name gsd -Value git svn dcommit

# git show
Set-Alias -Name gsh -Value git show

# git submodule init
Set-Alias -Name gsi -Value git submodule init

# git show --pretty=short --show-signature
Set-Alias -Name gsps -Value git show --pretty=short --show-signature

# git svn rebase
Set-Alias -Name gsr -Value git svn rebase

# git status --short
Set-Alias -Name gss -Value git status --short

# git status
Set-Alias -Name gst -Value git status

# git stash push
Set-Alias -Name gsta -Value git stash push

# git stash apply
Set-Alias -Name gstaa -Value git stash apply

# git stash --all
Set-Alias -Name gstall -Value git stash --all

# git stash clear
Set-Alias -Name gstc -Value git stash clear

# git stash drop
Set-Alias -Name gstd -Value git stash drop

# git stash list
Set-Alias -Name gstl -Value git stash list

# git stash pop
Set-Alias -Name gstp -Value git stash pop

# git stash show --patch
Set-Alias -Name gsts -Value git stash show --patch

# git submodule update
Set-Alias -Name gsu -Value git submodule update

# git switch
Set-Alias -Name gsw -Value git switch

# git switch --create
Set-Alias -Name gswc -Value git switch --create

# git switch $(git_develop_branch)
Set-Alias -Name gswd -Value git switch $(git_develop_branch)

# git switch $(git_main_branch)
Set-Alias -Name gswm -Value git switch $(git_main_branch)

# git_sync script
Set-Alias -Name gsy -Value /data/data/ termux/files/home/scripts/bin/git_sync

# git tag --annotate
Set-Alias -Name gta -Value git tag --annotate

# gtl() { git tag --sort=-v:refname -n --list "${1}*" }; noglob gtl
Set-Alias -Name gtl -Value gtl(){ git tag --sort=-v:refname -n --list "${1}*" }; noglob gtl

# git tag --sign
Set-Alias -Name gts -Value git tag --sign

# git tag | sort -V
Set-Alias -Name gtv -Value git tag | sort -V

# git update-index --no-assume-unchanged
Set-Alias -Name gunignore -Value git update-index --no-assume-unchanged

# git reset WIP commit
Set-Alias -Name gunwip -Value git rev-list --max-count=1 --format="%s" HEAD \ | grep -q "--wip--" && git reset HEAD~1

# git whatchanged -p
Set-Alias -Name gwch -Value git whatchanged -p --abbrev-commit --pretty=medium

# quick WIP commit
Set-Alias -Name gwip -Value git add -A; git rm $(git ls-files --deleted) 2>/dev/null; \ git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"

# git reset --hard && clean
Set-Alias -Name gwipe -Value git reset --hard && git clean --force -df

# git worktree
Set-Alias -Name gwt -Value git worktree

# git worktree add
Set-Alias -Name gwta -Value git worktree add

# git worktree list
Set-Alias -Name gwtls -Value git worktree list

# git worktree move
Set-Alias -Name gwtmv -Value git worktree move

# git worktree remove
Set-Alias -Name gwtrm -Value git worktree remove

